# Code adapted from https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html and # code adapted from: https://www.geeksforgeeks.org/displaying-the-coordinates-of-the-points-clicked-on-the-image-using-python-opencv/
import numpy as np
import cv2 as cv
import glob
import os

# code adapted from: https://www.geeksforgeeks.org/displaying-the-coordinates-of-the-points-clicked-on-the-image-using-python-opencv/
# function to save the coordinates of points clicked on the image as imagepoints.
# only allows left clicks now, can also add rightclicks if necessary.

def click_event(event, x, y, flags, param):
    if event == cv.EVENT_LBUTTONDOWN:

        # displaying the coordinates on the image
        print(f"Clicked coordinates: ({x}, {y})")
        cv.circle(img, (x, y), 3, (0, 255, 0), -1)
        cv.imshow('img', img)

        # saving the corner points as image points and appending the corresponding object point.
        imgpoints.append((x, y))
        objpoints.append(objp)

# termination criteria
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Chessboard square size (mm)
square_size = 16.6

# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((6*7,3), np.float32)
objp[:,:2] = np.mgrid[0:7,0:6].T.reshape(-1,2) * square_size

# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.

# Get the current working directory
current_dir = os.path.dirname(os.path.abspath(__file__))

# Construct the path to the image folder
image_folder = os.path.join(current_dir, "train images")

# Get the list of image files in the folder
images = glob.glob(os.path.join(image_folder, '*.jpeg'))

for fname in images:
    img = cv.imread(fname)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

    # Find the chess board corners
    ret, corners = cv.findChessboardCorners(gray, (7,6), None)

    # If found, add object points, image points (after refining them)
    if ret == True:
        objpoints.append(objp)
        corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
        imgpoints.append(corners2)

        # Draw and display the corners
        cv.drawChessboardCorners(img, (7,6), corners2, ret)
        cv.imshow('img', img)
        cv.waitKey(500)
    else:
        #if not found, set cornerpoints to mouseclicks, adding them as image points and object points.
        cv.imshow('img', img)
        cv.setMouseCallback('img', click_event)
        cv.waitKey(0)
cv.destroyAllWindows()


# Calibration

#create directory to store undistorted images
undistorted_folder = os.path.join(current_dir, "undistorted_images")
os.makedirs(undistorted_folder, exist_ok=True)

# getting the camera matrix, distortion coefficients, rotation and translation vectors
ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

np.savetxt('camera_matrix.txt', mtx)
np.savetxt('distortion_coefficients.txt', dist)

# undistorting and cropping images using optimal camera matrix
for fname in images:
    img = cv.imread(fname)
    h, w = img.shape[:2]

    # performing optimal camera matrix calculation
    newcameramtx, roi = cv.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))

    # undistorting
    dst = cv.undistort(img, mtx, dist, None, newcameramtx)

    # cropping
    x, y, w, h = roi
    dst = dst[y:y+h, x:x+w]

    # saving the images
    output_path = os.path.join(undistorted_folder, 'undistorted_' + os.path.basename(fname))
    cv.imwrite(output_path, dst)


# Re-projection error
    
mean_error = 0
for i in range(len(objpoints)):
    imgpoints2, _ = cv.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)
    error = cv.norm(imgpoints[i], imgpoints2, cv.NORM_L2)/len(imgpoints2)
    mean_error += error
print( "total error: {}".format(mean_error/len(objpoints)) )
